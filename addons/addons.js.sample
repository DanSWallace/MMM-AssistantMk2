/** addons.js **/
/** Allow to create personal addon on node_helper **/
/** (with external source) **/
/** /!\ Think to backup your file before update ! **/
/** @bugsounet **/

var _log = function() {
    var context = "[AMK2:ADDONS]"
    return Function.prototype.bind.call(console.log, console, context)
}()

var log = function() {
  //do nothing
}

var addonsConfig = {
  // /!\ do not remove TAG_AUTOINSERTCONFIG !
  //_TAG_AUTOINSERTCONFIG_

  test: {
    useTest: true,
    messageConsole: "Hi there ! this is a test addon for show your configs !"
  },
};

class ADDONS {
  constructor(config) {
    this.config= config
    var debug = (this.config.debug) ? this.config.debug : false
    if (debug == true) log = _log
    this.debug = debug
    this.addonsConfig = addonsConfig
  }
  doAddons (notification,payload,send) {
    this.sendSocketNotification = send
    // /!\ do not remove TAG_AUTOINSERTADDONS !
    //_TAG_AUTOINSERTADDONS_

    // test_plugin
    if (notification == "INIT") log("Test_plugin is " + (this.addonsConfig.test.useTest ? "enabled" : "disabled"))
    if (notification == "INIT" && this.addonsConfig.test.useTest) {
      console.log("[AMK2:ADDONS]", this.addonsConfig.test.messageConsole)
      //console.log("[AMK2:ADDONS] AMk2 Config:", this.config)
      console.log("[AMK2:ADDONS] addonsConfig:", this.addonsConfig)
      // for send socket notification "HELLO" and payload "TEST" for recipe instructions receive
      //this.sendSocketNotification("HELLO","TEST")
    }
  }

 // /!\ do not remove addRecipe !
  addRecipe (recipe,name) {
    if (!name) {
      log("[ERROR] NO_NAME_FOR_ADDON")
      return false
    }
    if (recipe) {
      let replacer = (key, value) => {
        if (typeof value == "function") {
          return "__FUNC__" + value.toString()
        }
        return value
      }
      try {
        var p = require("../addons/" + recipe).addon
        this.sendSocketNotification("LOAD_RECIPE", JSON.stringify(p, replacer, 2))
        log("ADDON_LOADED:", recipe)
        log(name +" is enabled")
        return true
      } catch (e) {
        log(`ADDON_ERROR (${recipe}):`, e.message)
        log(name +" is disabled")
        return false
      }
    } else {
      log("[ERROR] NO_ADDON_TO_LOAD")
      return false
    }
  }
}

module.exports = ADDONS
